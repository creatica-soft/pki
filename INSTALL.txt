### Installation

1. Create alpine VM instance (openstack or vmware) 1 cpu, 1GB of ram and disk should be more than enough
1.1. Optionally disable IPv6 with

```
vi /etc/sysctl.conf
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1

sysctl net.ipv6.conf.all.disable_ipv6=1
sysctl net.ipv6.conf.default.disable_ipv6=1
sysctl net.ipv6.conf.lo.disable_ipv6=1
```

1.2. Update /etc/hosts file with static IP matching server name; for example,

```
127.0.0.1      localhost.localdomain localhost
10.165.64.95   pki-signing-ca.example.internal pki-signing-ca pki.example.com
```

1.3. Configure /etc/resolv.conf

```
search example.internal
nameserver 10.1.1.1
nameserver 10.1.1.2
```

2. Create alpine group and user with rsa key ssh access for management

```
addgroup alpine
adduser -G alpine -D alpine
sed -i -e '/^alpine/s/!/*/' /etc/shadow
```

3. Install sudo and add alpine user into /etc/sudoers

```
apk add sudo

vi /etc/sudoers
alpine ALL=(ALL) NOPASSWD: ALL

sudo -u alpine -i
mkdir .ssh
ssh-keygen
cp .ssh/id_rsa.pub .ssh/authorized_keys
```

4. Disable ssh for root account and getty on ttyS0 in /etc/inittab if it's not already disabled by distro (reboot is required)
5. Configure chronyd with time servers such as ntp.example.internal and ntp2.example.internal
6. Install net-snmp and configure /etc/snmp/snmpd.conf for monitoring if needed. Beware of this bug https://gitlab.alpinelinux.org/alpine/aports/-/issues/12309.
7. Enable community repo and install necessary packages

```
sudo vi /etc/apk/repositories
http://dl-cdn.alpinelinux.org/alpine/v3.20/community

sudo apk update
sudo apk add php8 php83-openssl php83-fpm php83-curl php83-soap php83-xml uuidgen nginx git logrotate php83-gmp coreutils nginx-mod-http-headers-more php83-ldap php83-sqlite3 php83-mbstring sqlite openssl3 openssh certbot
```

8. Clone this repo as alpine user

```
git clone https://github.com/creatica-soft/pki
```

9. Copy config files from etc folder to /etc

10. Create /var/www/pki.example.com folder

```
sudo mkdir -p /var/www/pki.example.com/pki
```

11. Copy acme, certificates, certbot, cmp, cmp_client, crls, est, est_client, lib, mswstep, msxcep, ocsp folders and domains.txt, *.html, *.php, *.ico, domains.txt files from pki to /var/www/pki.example.com

```
sudo cp -r acme certificates certbot cmp cmp_client crls est est_client lib mswstep msxcep ocsp domains.txt *.html *.php *.ico domains.txt /var/www/pki.example.com/
sudo chown -R alpine:nobody /var/www/pki.example.com
sudo chmod 755 certbot/*.sh
```

12. Add user "nobody" into mail group for php mail to work.

```
sudo adduser nobody mail
```

13. Generate a private key for root CA, then create root CA self-signed certificate and store it in both formats DER and PEM. The first two commented out commands could be replaced by the following one. It only needs Key Cert Sign and CLR sign key usage extension in addition to Basic Constraints and Subject Key ID. Copy DER file to /var/www/pki.example.com/root_ca.crt for CA Information Access extension to work.

```
#sudo openssl genrsa -out /etc/ssl/private/root_ca.key 4096
#sudo openssl x509 -new -subj /CN=InternalRootCA -key /etc/ssl/private/root_ca.key -out /etc/ssl/root_ca.pem -extensions v3_ca -extfile /etc/ssl/openssl.cnf -days 3650
sudo openssl req -x509 -newkey rsa:4096 -subj /CN=InternalRootCA -extensions v3_ca_root -config /etc/ssl/openssl.cnf -days 3650 -out /etc/ssl/root_ca.pem -keyout /etc/ssl/private/root_ca.key -noenc
sudo openssl x509 -inform PEM -outform DER -in /etc/ssl/root_ca.pem -out /etc/ssl/root_ca.der
sudo cp /etc/ssl/root_ca.der /var/www/pki.example.com/pki/root_ca.crt
```

13.2 Temporarily set default_bits to 4096 in [req] section in openssl.cnf. Create a subordinate (signing) certificated signed by root CA. It may need to have Digital Signature extension for key usage, so add it in [v3_ca] section of openssl.cnf. It should also have CA Information Access and CRL distribution points extensions in addition to Basic Constraints, Subject Key ID and Authority Key ID. Save its private key in DER format as well and copy der file to /var/www/pki.example.com/pki/signing_ca.crt  for CA Information Access extension to work. Concatenate signing CA certificate with root CA certificate into ca_chain.pem for certbot tests.

```
sudo sed -i s/2048/4096/ /etc/ssl/openssl.cnf
sudo openssl req -CA /etc/ssl/root_ca.pem -CAkey /etc/ssl/private/root_ca.key -subj /CN=InternalSigningCA -extensions v3_ca_sub -config /etc/ssl/openssl.cnf -days 3650 -out /etc/ssl/signing_ca.pem -keyout /etc/ssl/private/signing_ca.key -noenc
sudo openssl x509 -inform PEM -outform DER -in /etc/ssl/signing_ca.pem -out /etc/ssl/signing_ca.der
sudo cp /etc/ssl/signing_ca.der /var/www/pki.example.com/pki/signing_ca.crt
sudo cat /etc/ssl/signing_ca.pem /etc/ssl/root_ca.pem | sudo tee /etc/ssl/ca_chain.pem
```

13.3 Set default_bits back to 2048 in [req] section in openssl.cnf. Create an SSL certificate for nginx server, signed by InternalSigningCA. Save it in DER format as well to save it into certs.db once certs.db is created for nginx SSL stapling to work. Add /etc/ssl/signing_ca.pem certificate to pki.example.com.pem to complete the certificate chain. Only root CA is trusted. If nginx server fails to provide intermediate certificate in addition to its own, its own certificate won't validate!

```
sudo sed -i s/4096/2048/ /etc/ssl/openssl.cnf
sudo openssl req -CA /etc/ssl/signing_ca.pem -CAkey /etc/ssl/private/signing_ca.key -subj /CN=pki.example.com -extensions usr_cert -addext "subjectAltName=DNS:pki.example.com" -config /etc/ssl/openssl.cnf -days 365 -out /etc/ssl/pki.example.com.pem -keyout /etc/ssl/private/pki.example.com.key -noenc
sudo cat /etc/ssl/signing_ca.pem | sudo tee -a /etc/ssl/pki.example.com.pem
sudo openssl x509 -inform PEM -outform DER -in /etc/ssl/pki.example.com.pem -out /etc/ssl/pki.example.com.der
```

13.4 Ensure the correct file permissions on private keys and certificates under /etc/ssl. For best practices keep root_ca.key in a more secure place (offline). php-fmp83 runs as nobody (make sure it's the only account in group nobody), it needs to access signing_ca.key. nginx master process starts as root, so it can read pki.example.com.key.

```
grep nobody /etc/passwd
nobody:x:65534:65534:nobody:/:/sbin/nologin
grep nobody /etc/group
nobody:x:65534:
sudo chown root:nobody /etc/ssl/private/signing_ca.key
sudo chmod 440 /etc/ssl/private/signing_ca.key
ls -la /etc/ssl/private
drwxr-xr-x 2 root root   4096 Jul  1 08:02 .
drwxr-xr-x 6 root root   4096 Jul  1 10:19 ..
-r-------- 1 root root 1704 Jul 10 23:30 pki.example.com.key
-r-------- 1 root root 3272 Jul 10 22:38 root_ca.key # move it offline!
-r--r----- 1 root nobody 3272 Jul 10 23:14 signing_ca.key

 ls -la /etc/ssl/*.der
-rw-r--r-- 1 root root 1406 Jul  1 07:20 /etc/ssl/root_ca.der
-rw-r--r-- 1 root root 1495 Jul  1 07:20 /etc/ssl/signing_ca.der
-rw-r--r-- 1 root root 1328 Jul  1 10:19 /etc/ssl/pki.example.com.der

ls -la /etc/ssl/*.pem
lrwxrwxrwx 1 root root   25 Jul  1 06:53 /etc/ssl/cert.pem -> certs/ca-certificates.crt
-rw-r--r-- 1 root root 1961 Jul  1 07:12 /etc/ssl/root_ca.pem
-rw-r--r-- 1 root root 2083 Jul  1 07:13 /etc/ssl/signing_ca.pem
-rw-r--r-- 1 root root 3937 Jul  5 10:31 /etc/ssl/pki.example.com.pem
```

13.5 Add root CA's cert into the /etc/ssl/certs/ca-certificates.crt file.

```
sudo cat /etc/ssl/root_ca.pem |sudo tee -a /etc/ssl/certs/ca-certificates.crt
```

14. Generate empty CRL for certificates signed with InternalRootCA. CRLs for certificates signed with InternalSigningCA are generated on the fly during CRL requests.

```
sudo sed -i s/signing_ca.pem/root_ca.pem/g /etc/ssl/openssl.cnf
sudo sed -i s/signing_ca.key/root_ca.key/g /etc/ssl/openssl.cnf
sudo touch /etc/ssl/index.txt
sudo echo 123456789ABCDEF0123456789ABCDEF0123456789ABCDF |sudo tee /etc/ssl/crlnumber
sudo openssl ca -gencrl -out /var/www/pki.example.com/pki/root_ca.crl -config /etc/ssl/openssl.cnf -crldays 3650
sudo openssl crl -inform PEM -in /var/www/pki.example.com/pki/root_ca.crl -outform DER -out /var/www/pki.example.com/pki/root_ca.crl
sudo sed -i s/root_ca.pem/signing_ca.pem/g /etc/ssl/openssl.cnf
sudo sed -i s/root_ca.key/signing_ca.key/g /etc/ssl/openssl.cnf
```

15. Add nginx, sshd and php-fpm8 to default runlevel

```
sudo rc-update add nginx
sudo rc-update add php-fpm8
sudo rc-update add sshd
```

17. Create /var/pki folder owned by nobody:alpine. It will have sqlite3 databases certs.db and acme.db

```
sudo mkdir /var/pki
sudo sqlite3 /var/pki/certs.db \
  'create table certs(serial TEXT PRIMARY KEY ASC, status INTEGER, revocationReason INTEGER, revocationDate INTEGER, notBefore INTEGER, notAfter INTEGER, subject TEXT, owner TEXT, role TEXT, cert BLOB, cn TEXT, fingerprint TEXT, sHash TEXT, iAndSHash TEXT, sKIDHash TEXT);' \
  'CREATE INDEX subj_idx on certs(subject); CREATE INDEX status_idx on certs(status); CREATE INDEX from_idx on certs(notBefore);' \
  'CREATE INDEX to_idx on certs(notAfter); CREATE INDEX owner_idx on certs(owner); CREATE INDEX role_idx on certs(role);' \
  'CREATE INDEX cn_idx on certs(cn); CREATE INDEX fingerprint_idx on certs(fingerprint); CREATE INDEX sHash_idx on certs(sHash);' \
  'CREATE INDEX iAndSHash_idx on certs(iAndSHash); CREATE INDEX sKIDHash_idx on certs(sKIDHash);'

status: 0 - valid, 1 - expired, -1 - revoked

sudo sqlite3 /var/pki/certs.db \
  'create table cert_req_ids(serial TEXT PRIMARY KEY ASC, certReqId TEXT, timestamp INTEGER, nonce TEXT, transactionID TEXT);' \
  'CREATE INDEX certReqId_idx on cert_req_ids(certReqId); CREATE INDEX transactionID_idx on cert_req_ids(transactionID);'

cert_req_ids table is used by CMP only and has unconfirmed cert_req_ids; once confirmed (or denied) in CERTCONF message or unconfirmed within 
$confirm_wait_time_sec, the cert status should be updated in certs table from 2 (on-hold) to either 0 (valid) or revoked (-1) and the record 
in cert_req_ids should be deleted

//key is base64url_encoded key bytes
sudo sqlite3 /var/pki/certs.db 'create table keys(kid TEXT PRIMARY KEY ASC, key TEXT);'

sudo sqlite3 /var/pki/acme.db \
  'create table nonces(nonce TEXT PRIMARY KEY ASC, ip TEXT, expires INTEGER);' \
  'create index ip_idx on nonces(ip);' \
  'create index expires_idx on nonces(expires);'

//uri for an account should look like /acme/accounts/<accountID>
sudo sqlite3 /var/pki/acme.db \
  'create table accounts(id TEXT PRIMARY KEY ASC, status INTEGER, termsOfServiceAgreed INTEGER, jwk_hash TEXT, kid TEXT, jwk BLOB, contacts BLOB, externalAccountBinding BLOB);' \
  'create index jwk_hash_idx on accounts(jwk_hash);' \
  'create index account_status_idx on accounts(status);' \
  'create index account_kid_idx on accounts(kid);'

//uri for an order should look like /acme/accounts/<accountID>/orders/<orderID>
sudo sqlite3 /var/pki/acme.db \
  'PRAGMA foreign_keys = ON;' \
  'create table orders(id TEXT PRIMARY KEY ASC, status INTEGER, expires INTEGER, identifiers BLOB, notBefore INTEGER, notAfter INTEGER, certSerial TEXT, account TEXT, foreign key(account) references accounts(id) ON DELETE CASCADE);' \
  'create index order_status_idx on orders(status);' \
  'create index order_expires_idx on orders(expires);' \
  'create index notBefore_idx on orders(notBefore);' \
  'create index notAfter_idx on orders(notAfter);'

//uri for authorizations should look like /acme/accounts/<accountID>/orders/<orderID>/authorizations/<authorizationID>
sudo sqlite3 /var/pki/acme.db \
  'PRAGMA foreign_keys = ON;' \
  'create table authorizations(id TEXT PRIMARY KEY ASC, identifier BLOB, status INTEGER, expires INTEGER, wildcard INTEGER, "order" TEXT, foreign key("order") references orders(id) ON DELETE CASCADE);' \
  'create index authorization_status_idx on authorizations(status);' \
  'create index authorization_expires_idx on authorizations(expires);'

//uri for challenges should look like /acme/accounts/<accountID>/orders/<orderID>/authorizations/<authorizationID>/challenges/<challengeID>
sudo sqlite3 /var/pki/acme.db \
  'PRAGMA foreign_keys = ON;' \
  'create table challenges(id TEXT PRIMARY KEY ASC, type TEXT, url TEXT, status INTEGER, token TEXT, error TEXT, validated INTEGER, authorization TEXT, foreign key(authorization) references authorizations(id) ON DELETE CASCADE);' \
  'create index type_idx on challenges(type);' \
  'create index challenge_status_idx on challenges(status);' \
  'create index token_idx on challenges(token);' \
  'create index validated_idx on challenges(validated);'

sudo chown -R nobody:alpine /var/pki # for nginx access
sudo chmod 664 /var/pki/*.db

sudo -u nobody php83 save_cert.php /etc/ssl/pki.example.com.der # for nginx SSL stapling to work

nonces table is used for ACME nonces, ip is the acme client's IP address; once the nonce is used, it's removed from the table
```

18. Start php-fpm8 and nginx services

```
sudo service nginx start
sudo service php-fpm83  start
```

19. Review /var/www/pki.example.com/*/globals.php, update DNS if necessary for pki.example.com or /etc/hosts file, obtain secret key from https://pki.example.com/key_request.html. If AD is not available, use username test with any password to get the key - only for testing, comment out if $username == "test" line in key_request.php in production! Update subject and secret in [ir] section of openssl.conf file. Create private keys for a user priv.key and for a host test.example.internal.key and run the php8 tests.php from *_client and certbot folders; for example,

```
#if testing with fake DNS names in a docker container, add these lines into /etc/hosts
sudo echo 127.0.0.1      pki.example.com | sudo tee -a /etc/hosts
sudo echo 127.0.0.1      test.example.com | sudo tee -a /etc/hosts

cd  /var/www/pki.example.com/cmp_client
sudo php83 tests.php

cd ../certbot
chmod 755 *.sh
./tests.sh

cd ../est_client
php83 tests.php
```

20. Configure certificate database backup (/var/pki/certs.db) and sync with stand-by instance once it is setup similar to production one. ACL for tcp port 22 is required to be open.

```
cp /home/alpine/pki/backup/backup.sh /home/alpine
crontab -e
0 0 * * * /home/alpine/backup.sh
```
